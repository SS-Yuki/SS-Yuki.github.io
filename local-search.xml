<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shell</title>
    <link href="/2024/08/06/Shell/"/>
    <url>/2024/08/06/Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell分类"><a href="#Shell分类" class="headerlink" title="Shell分类"></a>Shell分类</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows has two command-line shells:</p><ul><li>the Command shell (cmd)</li><li>PowerShell<br>cmd可以运行win命令；PowerShell可以运行win命令和cmdlet命令。<br>cmd脚本语言<code>.bat</code>；PowerShell脚本语言<code>.ps1</code></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>sh, csh, tcsh, bash, zsh, fish…<br><strong>Bash Shell</strong><br>1989 年首次发布，由 Brain Fox 为 GNU 项目编写的，目的是作为 Bourne Shell (sh) 的免费软件替代品，是大多数 Linux 发行版的默认 Shell 环境。<br>用户配置设置在 <code>.bashrc</code> 中。<br><strong>Z Shell</strong><br>1990 年由 Paul Falstad 发布，它具有 Bash、Korn Shell 和 C Shell 共有的一些功能，macOS 默认使用 Zsh Shell。<br>比 Bash 可配置度更高，有围绕 Z Shell 构建的框架（Oh My Zsh）。<br>用户配置设置在 <code>.zshrc</code> 中。<br><strong>Fish Shell</strong><br>2005 年由 Axel Liljencrantz 创建，不符合 POSIX shell 标准。<br>由于默认情况下 Fish 已经预置了很多配置，因此它被认为比 Zsh 等其他 <code>sh</code> 选项更适合初学者。</p><h1 id="自定义工具"><a href="#自定义工具" class="headerlink" title="自定义工具"></a>自定义工具</h1><p>查看&#x2F;切换shell</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看可用shell</span><br><span class="hljs-built_in">cat</span> /etc/shells                          <br><span class="hljs-comment"># /etc/shells: valid login shells</span><br>/bin/sh<br>/bin/bash<br>/usr/bin/bash<br>/bin/rbash<br>/usr/bin/rbash<br>/usr/bin/sh<br>/bin/dash<br>/usr/bin/dash<br>/usr/bin/tmux<br>/usr/bin/screen<br>/bin/zsh<br>/usr/bin/zsh<br><br><span class="hljs-comment"># 查看当前shell</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span>                                                            <br><br><span class="hljs-comment"># 可以通过包管理器安装zsh</span><br><span class="hljs-comment"># 切换成zsh</span><br>chsh -s $(<span class="hljs-built_in">which</span> zsh)<br></code></pre></td></tr></table></figure><p>一些主题中的部件需要特殊字体，下载使用使用Nerd字体。<br>Window：<a href="https://www.nerdfonts.com/">官网</a>下载MesloLG Nerd Font，将所有的<code>TrueType字体文件</code>右键进行安装。<br>MacOS&#x2F;Linux：脚本安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/ryanoasis/nerd-fonts.git --depth 1<br><span class="hljs-built_in">cd</span> nerd-fonts<br>./install.sh<br></code></pre></td></tr></table></figure><h2 id="Oh-my-zsh"><a href="#Oh-my-zsh" class="headerlink" title="Oh my zsh"></a>Oh my zsh</h2><p>适用于zsh。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装命令</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class="hljs-comment"># 卸载</span><br>uninstall_oh_my_zsh<br></code></pre></td></tr></table></figure><p>安装后<code>~/.zshrc</code>会改变，从而启动oh-my-zsh，此时终端如下：<br><img src="/2024/08/06/Shell/20240727220552.png"><br>之后可以下载主题和插件，一方面要将下载保存到<code>$ZSH_CUSTOM</code>(<del>&#x2F;.oh-my-zsh&#x2F;custom)，另一方面要在&#96;</del>&#x2F;.zshrc&#96;进行相应设置以生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 主题$ZSH_CUSTOM/themes，插件$ZSH_CUSTOM/plugins</span><br><span class="hljs-comment"># powerlevel10k主题  </span><br>git <span class="hljs-built_in">clone</span> https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$ZSH_CUSTOM</span>/themes/powerlevel10k  <br><span class="hljs-comment"># zsh-autosuggestions自动提示插件  </span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions  <br><span class="hljs-comment"># zsh-syntax-highlighting语法高亮插件  </span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting<br><br><span class="hljs-comment"># 对于p10k，需要进行自定义配置</span><br>p10k configure<br><br><span class="hljs-comment"># ~/.zshrc</span><br><span class="hljs-comment"># 修改主题  </span><br>ZSH_THEME=<span class="hljs-string">&quot;powerlevel10k/powerlevel10k&quot;</span>  <br><span class="hljs-comment"># 启用插件  </span><br>plugins=(  <br>  git  <br>  zsh-autosuggestions  <br>  zsh-syntax-highlighting  <br>)<br><br><span class="hljs-comment"># 更改配置后重载</span><br>omz reload<br></code></pre></td></tr></table></figure><p>效果展示：<br><img src="/2024/08/06/Shell/20240727222239.png"></p><h2 id="Zim"><a href="#Zim" class="headerlink" title="Zim"></a>Zim</h2><p>Zim 启动速度更快，相比 oh-my-zsh 更加轻量级，适用于zsh。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装命令</span><br>curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh<br></code></pre></td></tr></table></figure><p>安装后<code>~/.zshrc</code>会改变，而Zim的配置文件为<code>~/.zimrc</code>，在该文件中列出需要使用的插件（包括主题），比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">zmodule romkatv/powerlevel10k<br>zmodule completion<br></code></pre></td></tr></table></figure><p>之后运行<code>zimfw install</code>来安装所需插件，与oh-my-zsh类似，同样需要配置<code>p10k</code>主题。<br>效果展示：<br><img src="/2024/08/06/Shell/a10ecc77e83dc75f2d949816f756846.png"></p><h2 id="Oh-my-posh"><a href="#Oh-my-posh" class="headerlink" title="Oh my posh"></a>Oh my posh</h2><p>可以用于多种shell。<br><img src="/2024/08/06/Shell/20240727223308.png"><br>可以在Windows中美化PowerShell的样式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装命令</span><br>winget upgrade JanDeDobbeleer.OhMyPosh -s winget<br></code></pre></td></tr></table></figure><p>Windows中自带蓝色的Windows PowerShell，可以在Microsoft Store中下载黑色的PowerShell，本文使用黑色的PowerShell作为终端的默认shell。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看使用的shell</span><br>oh-my-posh get shell<br><br><span class="hljs-comment"># PowerShell配置脚本文件位置（类似~/.zshrc）</span><br>(base) PS C:\Users\kangy&gt; <span class="hljs-variable">$PROFILE</span><br>C:\Users\kangy\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1<br><span class="hljs-comment"># 编辑PowerShell配置文件脚本</span><br>notepad <span class="hljs-variable">$PROFILE</span><br><span class="hljs-comment"># 若文件不存在则创建</span><br>New-Item -Path <span class="hljs-variable">$PROFILE</span> -Type File -Force<br><span class="hljs-comment"># 在脚本中添加如下启动oh-my-posh并使主题生效</span><br>&amp; ([ScriptBlock]::Create((oh-my-posh init pwsh --config &quot;<span class="hljs-variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot; --print) -join &quot;`n&quot;))<br><br><span class="hljs-comment"># 重载shell</span><br>. <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>效果展示：<br><img src="/2024/08/06/Shell/20240727225039.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
      <tag>zsh</tag>
      
      <tag>oh-my-zsh</tag>
      
      <tag>zim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装记录</title>
    <link href="/2024/08/05/Install-Ubuntu/"/>
    <url>/2024/08/05/Install-Ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="安装Ubuntu系统（包含Nvidia驱动）"><a href="#安装Ubuntu系统（包含Nvidia驱动）" class="headerlink" title="安装Ubuntu系统（包含Nvidia驱动）"></a>安装Ubuntu系统（包含Nvidia驱动）</h1><blockquote><p>CPU: i7-14700K<br>显卡: GeForce RTX 4060Ti 16g</p></blockquote><p>U盘启动后选项如下：<br><img src="/2024/08/06/Shell/l-Ubuntu/20240804203849.png"></p><blockquote><p>失败记录：<br>选择<code>Try or Install Ubuntu</code>无法进入安装界面，一直停留在Ubuntu的加载界面；<br>选择<code>Ubuntu(safe graphics)</code>进入安装，但过程中失败，通过log发现有联网需求，之后操作选择使用有线网络；<br>重复几次后，突然前两种安装+是否添加<code>nomodeset</code>共四种方法均无法成功安装，选择清空硬盘和U盘并重制启动U盘；<br>安装Ubuntu后再次启动一直黑屏无反应，后来将HDMI从显卡换到主板上解决。</p></blockquote><p>步骤：<br>由于采用双硬盘双系统的安装策略，所以先拔掉装有Windows的硬盘，防止EFI装在同一块硬盘上。</p><p>选择<code>Ubuntu(safe graphics)</code>，按<code>E</code>进入配置，在<code>quiet splash</code>后面添加<code>nomodeset</code>参数，之后按<code>F10</code>进入Ubuntu 24.04的安装。</p><blockquote><p><code>nouveau</code>是通过逆向得到的非官方的Nvidia驱动，该驱动可能在一些较新的显卡上工作不正常，通过<code>nomodeset</code>来禁止加载该驱动，防止引导时黑屏。</p></blockquote><p>安装后重启拔掉U盘，此时将HDMI换到主板相应接口，否则一直黑屏。</p><blockquote><p>此处针对黑屏的参考资料中提到同样在Ubuntu引导界面进行如上屏蔽<code>nouveau</code>的操作后可以正常进入，但我也没有显示引导界面，完全黑屏，换到主板接口后则无需操作的正常进入系统。</p></blockquote><p>进入系统后需要完全禁止<code>nouveau</code>，使得之后可以自动屏蔽该驱动。之后重启，可以将HDMI重新接到显卡接口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑黑名单文件</span><br><span class="hljs-built_in">sudo</span> nano /etc/modprobe.d/blacklist.conf<br><span class="hljs-comment"># 在末尾添加如下条目</span><br>blacklist nouveau<br><span class="hljs-comment"># 使黑名单生效</span><br><span class="hljs-built_in">sudo</span> update-initramfs -u<br></code></pre></td></tr></table></figure><blockquote><p>安装Nvidia官方驱动之前可以先检查是否会更换内核版本，我的版本中无线网卡未成功工作，升级了Linux内核版本，但由于安装后的Nvidia驱动在切换版本后不生效，所以后来进行了卸载重装，具体留在无线网卡部分。</p></blockquote><p>之后安装Nvidia官方驱动，在官网下载对应显卡的驱动程序。此时直接运行会遇到各种问题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 问题</span><br>WARNING: Unable to find suitable destination to install 32-bit compatibility libraries<br><span class="hljs-comment"># 解决</span><br><span class="hljs-built_in">sudo</span> dpkg --add-architecture i386<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install libc6:i386<br><br><span class="hljs-comment"># 问题</span><br>An incomplete installation of libglvnd was found.                        <br>All of the essential libglvnd libraries are present, but one or more optional  components are missing.<br>Do you want to install a full copy of libglvnd? This will overwrite any existing libglvnd libraries.<br><span class="hljs-comment"># 解决</span><br><span class="hljs-built_in">sudo</span> apt install libglvnd-dev<br><br><span class="hljs-comment"># 问题</span><br>WARNING: Unable to determine the path to install the libglvnd EGL vendor library config files.<br>Check that you have pkg-config and the libglvnd development libraries installed, or specify a path with --glvnd-egl-config-path.<br><span class="hljs-comment"># 解决</span><br><span class="hljs-built_in">sudo</span> apt install pkg-config<br></code></pre></td></tr></table></figure><p>所以安装前先进行下载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> dpkg --add-architecture i386<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install libc6:i386<br><span class="hljs-built_in">sudo</span> apt install build-essential libglvnd-dev pkg-config<br><span class="hljs-comment"># 停止当前显示服务器</span><br><span class="hljs-built_in">sudo</span> telinit 3 <br><span class="hljs-comment"># 运行驱动安装</span><br><span class="hljs-built_in">sudo</span> bash NVIDIA-Linux-x86_64-550.107.02.run<br><span class="hljs-comment"># 重启</span><br><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><p>驱动安装完成。<br><img src="/2024/08/06/Shell/l-Ubuntu/driver.png"></p><h1 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h1><p>在<code>Settings</code>的<code>Region &amp; Language</code>中安装汉语，应用并重启。<br>在<code>Keyboard</code>中添加拼音键入。</p><h1 id="卸载snap（安装Chrome）"><a href="#卸载snap（安装Chrome）" class="headerlink" title="卸载snap（安装Chrome）"></a>卸载snap（安装Chrome）</h1><p>先安装Chrome（之后需要卸载snap版的Firefox），下载deb包，调用<code>sudo dpkg -i xxx.deb</code>安装即可。</p><p>卸载snap：<br>删除已安装的 Snap 软件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 多执行几次</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> $(snap list | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>); <span class="hljs-keyword">do</span> <br>    <span class="hljs-built_in">sudo</span> snap remove <span class="hljs-variable">$p</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 成功效果</span><br>snaps are installed yet. Try <span class="hljs-string">&#x27;snap install hello-world&#x27;</span>.  <br></code></pre></td></tr></table></figure><p>（删除 Snap 的 Core 文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl stop snapd                                                 ─╯<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">disable</span> --now snapd.socket<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> /snap/core/*; <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">sudo</span> umount <span class="hljs-variable">$m</span><br><span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><p>删除 Snap 管理工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt autoremove --purge snapd<br></code></pre></td></tr></table></figure><p>删除 Snap 的目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf ~/snap                                                             ─╯<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /snap<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/snap<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/snapd<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/cache/snapd<br></code></pre></td></tr></table></figure><p>禁止 apt 安装 snapd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> nano /etc/apt/preferences.d/no-snapd.pref<br><span class="hljs-comment"># 文件内容</span><br>Package: snapd                                                            ─╯<br>Pin: release a=*<br>Pin-Priority: -10<br></code></pre></td></tr></table></figure><h1 id="安装Clash"><a href="#安装Clash" class="headerlink" title="安装Clash"></a>安装Clash</h1><p>Clash_for_Windows资源站：<a href="https://archive.org/download/clash_for_windows_pkg">https://archive.org/download/clash_for_windows_pkg</a><br>下载并解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxvf Clash.for.Windows-0.18.5-x64-linux.tar.gz<br><span class="hljs-built_in">mv</span> Clash.for.Windows-0.18.5-x64-linux clash<br><span class="hljs-built_in">cd</span> Clash<br>./cfw<br></code></pre></td></tr></table></figure><p>导入订阅<br>设置系统代理<br><img src="/2024/08/06/Shell/l-Ubuntu/20240804223352.png"></p><h1 id="美化主题"><a href="#美化主题" class="headerlink" title="美化主题"></a>美化主题</h1><p>美化项：</p><ul><li>图标主题：更改图标主题将更改应用程序图标的外观，最好选择支持各种应用程序的图标主题，否则可能会看到一些图标外观保持不变甚至看起来不合适。</li><li>GTK 主题：GTK 是用于构建应用程序的图形用户界面的框架。基本上，它决定了应用程序界面的外观（前提是这个应用程序是 GTK 应用程序，大部分的系统应用程序都是 GTK 应用程序）。</li><li>GNOME Shell 主题：更改 GNOME Shell 主题将更改 Shell 元素，例如顶部面板、活动概览、桌面通知等。</li><li>光标主题</li></ul><p>环境安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装tweak工具，添加名为Tweak的应用程序，可以用来更改主题、图标等</span><br><span class="hljs-built_in">sudo</span> apt install gnome-tweaks<br><span class="hljs-comment"># 可以在chrome中下载gnome-shell扩展，https://extensions.gnome.org/</span><br><span class="hljs-built_in">sudo</span> apt install chrome-gnome-shell<br><span class="hljs-comment"># 添加名为Extensions的应用程序，可以进行gnome-shell扩展的管理与配置</span><br><span class="hljs-built_in">sudo</span> apt install gnome-shell-extensions<br></code></pre></td></tr></table></figure><p>在扩展中，启用<code>User Themes</code>后可以在<code>Tweak</code>中进行Shell主题的更改，启动<code>Dash to Dock</code>后可以灵活美观的控制Dock栏。</p><p>主题下载地址：<a href="https://www.opendesktop.org/">https://www.opendesktop.org/</a><br>存放位置：</p><ul><li>~&#x2F;.themes：GTK 主题，GNOME Shell 主题</li><li>~&#x2F;.icons：图标主题，光标主题</li></ul><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><p>安装Zsh并使用其作为Shell<br>安装Zim并借助其安装p10k主题以及其他插件，见Shell文章</p><h1 id="更换Linux内核"><a href="#更换Linux内核" class="headerlink" title="更换Linux内核"></a>更换Linux内核</h1><p>板载无线网卡无法使用，由<code>lshw</code>命令可以得到无线网卡品牌为<code>WCN785x Wi-Fi 7(802.11be) 320MHz 2x2 [FastConnect 7800]</code>，对比下面的以太网，该无线网卡没有合适的驱动程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># lshw</span><br>lshw -C network                                                          <br>WARNING: you should run this program as super-user.<br>  *-network                 <br>       description: Network controller<br>       product: WCN785x Wi-Fi 7(802.11be) 320MHz 2x2 [FastConnect 7800]<br>       vendor: Qualcomm Technologies, Inc<br>       physical <span class="hljs-built_in">id</span>: 0<br>       bus info: pci@0000:06:00.0<br>       version: 01<br>       width: 64 bits<br>       clock: 33MHz<br>       capabilities: bus_master cap_list<br>       configuration: driver=ath12k_pci latency=0<br>       resources: irq:204 memory:82200000-823fffff<br>  *-network<br>       description: Ethernet interface<br>       product: Ethernet Controller I225-V<br>       vendor: Intel Corporation<br>       physical <span class="hljs-built_in">id</span>: 0<br>       bus info: pci@0000:07:00.0<br>       logical name: enp7s0<br>       version: 03<br>       serial: d8:43:ae:79:a2:80<br>       size: 100Mbit/s<br>       capacity: 1Gbit/s<br>       width: 32 bits<br>       clock: 33MHz<br>       capabilities: bus_master cap_list ethernet physical tp 10bt 10bt-fd 100bt 100bt-fd 1000bt-fd autonegotiation<br>       configuration: autonegotiation=on broadcast=<span class="hljs-built_in">yes</span> driver=igc driverversion=6.8.0-39-generic duplex=full firmware=1073:8754 ip=192.168.1.2 latency=0 <span class="hljs-built_in">link</span>=<span class="hljs-built_in">yes</span> multicast=<span class="hljs-built_in">yes</span> port=twisted pair speed=100Mbit/s<br>       resources: irq:19 memory:82e00000-82efffff memory:82f00000-82f03fff<br>WARNING: output may be incomplete or inaccurate, you should run this program as super-user.<br><br><span class="hljs-comment"># dmesg</span><br><span class="hljs-built_in">sudo</span> dmesg<br>...<br>[    5.453515] ath12k_pci 0000:06:00.0: chip_id 0x2 chip_family 0x4 board_id 0xff soc_id 0x40170200<br>[    5.453526] ath12k_pci 0000:06:00.0: fw_version 0x100301e1 fw_build_timestamp 2023-12-06 04:05 fw_build_id QC_IMAGE_VERSION_STRING=WLAN.HMT.1.0.c5-00481-QCAHMTSWPL_V1.0_V2.0_SILICONZ-3<br>[    5.453650] ath12k_pci 0000:06:00.0: qmi failed to load regdb bin:<br>[    5.453653] ath12k_pci 0000:06:00.0: qmi failed to load regdb file:-2<br>...<br></code></pre></td></tr></table></figure><p>通过查阅<a href="https://askubuntu.com/questions/1513315/issue-with-wireless-network-connection-on-ubuntu-24-04-lts">相关问题</a>，得知可以通过更换最新稳定版的Linux内核（提供了相应的<code>Wi-Fi 7</code>的驱动）来解决。<br>查看当前内核版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">uname</span> -r                                                                  <br>6.8.0-39-generic<br></code></pre></td></tr></table></figure><p>安装最新的稳定版内核：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载最新的稳定版内核</span><br>wget -c https://kernel.ubuntu.com/mainline/v6.10.2/amd64/linux-headers-6.10.2-061002_6.10.2-061002.202407271100_all.deb<br>wget -c https://kernel.ubuntu.com/mainline/v6.10.2/amd64/linux-headers-6.10.2-061002-generic_6.10.2-061002.202407271100_amd64.deb<br>wget -c https://kernel.ubuntu.com/mainline/v6.10.2/amd64/linux-image-unsigned-6.10.2-061002-generic_6.10.2-061002.202407271100_amd64.deb<br>wget -c https://kernel.ubuntu.com/mainline/v6.10.2/amd64/linux-modules-6.10.2-061002-generic_6.10.2-061002.202407271100_amd64.deb <br><br><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> dpkg -i *.deb<br><br><span class="hljs-comment"># 重启</span><br><span class="hljs-built_in">sudo</span> reboot<br><br><span class="hljs-comment"># 验证</span><br><span class="hljs-built_in">uname</span> -r<br>6.10.2-061002-generic<br></code></pre></td></tr></table></figure><p>更换到<code>6.10.2</code>版本的内核后，可以搜索到无线网络，表明驱动正常工作。但是，<code>nvidia-smi</code>失败，更换Linux内核版本会导致Nvidia驱动发生问题，所以可以先选择合适的内核版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">nmcli device status<br>DEVICE          TYPE      STATE                   CONNECTION         <br>enp7s0          ethernet  connected               Wired connection 1 <br>wlp6s0          wifi      connected               TP-LINK_9B19       <br>lo              loopback  connected (externally)  lo                 <br>p2p-dev-wlp6s0  wifi-p2p  disconnected            --      <br></code></pre></td></tr></table></figure><p>从当前存在的内核版本间切换：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 列出当前所有内核版本，每个menuentry项是一个内核</span><br><span class="hljs-built_in">sudo</span> grep menuentry /boot/grub/grub.cfg<br><span class="hljs-keyword">if</span> [ x<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;feature_menuentry_id&#125;</span>&quot;</span> = xy ]; <span class="hljs-keyword">then</span><br>  menuentry_id_option=<span class="hljs-string">&quot;--id&quot;</span><br>  menuentry_id_option=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">export</span> menuentry_id_option<br>menuentry <span class="hljs-string">&#x27;Ubuntu&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-simple-dbc01096-0009-4726-8fa2-076494d33602&#x27;</span> &#123;<br>submenu <span class="hljs-string">&#x27;Advanced options for Ubuntu&#x27;</span> <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-advanced-dbc01096-0009-4726-8fa2-076494d33602&#x27;</span> &#123;<br>    menuentry <span class="hljs-string">&#x27;Ubuntu, with Linux 6.10.2-061002-generic&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-6.10.2-061002-generic-advanced-dbc01096-0009-4726-8fa2-076494d33602&#x27;</span> &#123;<br>    menuentry <span class="hljs-string">&#x27;Ubuntu, with Linux 6.10.2-061002-generic (recovery mode)&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-6.10.2-061002-generic-recovery-dbc01096-0009-4726-8fa2-076494d33602&#x27;</span> &#123;<br>    menuentry <span class="hljs-string">&#x27;Ubuntu, with Linux 6.8.0-39-generic&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-6.8.0-39-generic-advanced-dbc01096-0009-4726-8fa2-076494d33602&#x27;</span> &#123;<br>    menuentry <span class="hljs-string">&#x27;Ubuntu, with Linux 6.8.0-39-generic (recovery mode)&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-6.8.0-39-generic-recovery-dbc01096-0009-4726-8fa2-076494d33602&#x27;</span> &#123;<br>menuentry <span class="hljs-string">&quot;Memory test (memtest86+x64.efi)&quot;</span> --class memtest <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;memtest86+&#x27;</span> &#123;<br>menuentry <span class="hljs-string">&#x27;Memory test (memtest86+x64.efi, serial console)&#x27;</span> --class memtest <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;memtest86+-serial&#x27;</span> &#123;<br>        menuentry <span class="hljs-string">&#x27;UEFI Firmware Settings&#x27;</span> <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;uefi-firmware&#x27;</span> &#123;<br><br><span class="hljs-comment"># 更改默认启动内核，将文件中的`GRUB_DEFAULT=0`改为相应的`GRUB_DEFAULT=&quot;1&gt; ?&quot;`</span><br><span class="hljs-built_in">sudo</span> nano /etc/default/grub<br>GRUB_DEFAULT=<span class="hljs-string">&quot;1&gt; 2&quot;</span> <span class="hljs-comment"># 改回`Ubuntu, with Linux 6.8.0-39-generic`</span><br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://www.onitroad.com/jc/linux/ubuntu/faq/how-to-install-the-nvidia-drivers-on-ubuntu-20-04.html">如何在Ubuntu 20.04 Linux上安装NVIDIA驱动程序</a></li><li><a href="https://www.bilibili.com/video/BV1wY411p7mU">NVIDIA显卡的Ubuntu驱动程序安装方法</a></li><li><a href="https://sysin.cn/blog/ubuntu-remove-snap/">删除 Snap 的方法</a></li><li><a href="https://www.joeyne.cool/http/proxy/ubuntu-%E5%AE%89%E8%A3%85clash%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/">Ubuntu 配置clash的四种方式</a></li><li><a href="https://blog.csdn.net/weixin_44267654/article/details/133773997">Ubuntu 23 安装Gnome主题</a></li><li><a href="https://www.cnblogs.com/WHU-TD/p/14010786.html">GNOME 桌面美化</a></li><li><a href="https://itsfoss.com/install-themes-ubuntu/">How to Install Themes in Ubuntu Linux</a></li><li><a href="https://askubuntu.com/questions/1513315/issue-with-wireless-network-connection-on-ubuntu-24-04-lts">Issue with Wireless Network Connection on Ubuntu 24.04 LTS</a></li><li><a href="https://sypalo.com/how-to-upgrade-ubuntu">How to upgrade Ubuntu to 24.04 and kernel to latest version</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Nvidia</tag>
      
      <tag>Snap</tag>
      
      <tag>Gnome</tag>
      
      <tag>Zsh</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
